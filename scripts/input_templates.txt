INPUT ROWS



   fluidRow(
     column(2,
            fileInput(
              "file_alignment", "Upload alignment in fasta-format", accept = c(".fasta")
            ),
            numericInput(
              "window", 
              "Size of sliding window", 
              min = 50, max = 10000, value = 200
            ),
            numericInput(
              "step", 
              "Size of step", 
              min = 10, max = 10000, value = 50
            ),
            actionButton("goButton", "Run")
     ),
     column(8,
            p("Short description of this app"),
            textOutput("selected_var"),
            plotOutput("rmse_matrix_plot", click = "plot_click"),
            plotOutput("control"),
            verbatimTextOutput("info")
    )
   ),
   
   
   fluidRow(
     column(2,
            numericInput(
              "start1", "Start",
              value=1
            )
     ),
     column(2,
            numericInput(
              "end1", "End",
              value=100
            )
     )
   ),
   
   fluidRow(
     column(2,
            numericInput(
              "start2", 
              "Start",
              value=101
            )
     ),
     column(2,
            numericInput(
              "end2", 
              "End",
              value=200
            )
     )
   ),
   
   fluidRow(
             
            actionButton("goButton2", "Run")
     ),
     
   
   fluidRow(
     plotOutput("dist_plot")
     
   )
     
   )
   
   
   
---------------------------------------------------
SIDE BAR ONE PAGE

sidebarLayout(
  sidebarPanel(
    fileInput(
      "file_alignment", "Upload alignment in fasta-format", accept = c(".fasta")
    ),
    numericInput(
      "window", 
      "Size of sliding window", 
      min = 50, max = 10000, value = 200
    ),
    numericInput(
      "step", 
      "Size of step", 
      min = 10, max = 10000, value = 50
    ),
    actionButton("goButton", "Run")

    
  ),
  
  
  mainPanel(
    p("Short description of this app"),
    textOutput("selected_var"),
    plotOutput("rmse_matrix_plot", click = "plot_click"),
    verbatimTextOutput("info")
    
    
    )









   observeEvent(input$goButton, {
                output$selected_var <- renderText({input$file_alignment$datapath
                                                  })
                output$rmse_matrix_plot <- renderPlot({

                  #draws rmse matrix
                      aln = read.dna(as.character(input$file_alignment$datapath), format="fasta")
                      matrix_rmse = plot_rmse(aln, input$step, input$window,"pdist","pairwise")
                      
                      heatmap.2(as.matrix(matrix_rmse[nrow(matrix_rmse):1,]),Rowv = FALSE,Colv = "Rowv",dendrogram = 'none',col=matlab.like,tracecol=NA)
                      })
                
                #np <- nearPoints(matrix_rmse, input$plot_click)
                output$control = plot_control(aln)
                #output$info <- renderText({
                #  paste0("x=", input$plot_click$row, "\ny=", input$plot_click$col)
                #})
                
                }
   )
  
  observeEvent(
    input$goButton2, {
      
      
      output$dist_plot = plot_dist_test(aln, input$start1,input$end1,input$start2,input$end2)
      
      
    }
    